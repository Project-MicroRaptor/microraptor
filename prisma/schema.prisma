// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  location      String?
  age           Int?
  bio           String?
  MessageGroups MessageGroup[]
  Message       Message[]
}

model Project {
  id               String          @id @default(cuid())
  name             String
  createdAt        DateTime        @default(now())
  completedAt      DateTime        @default(dbgenerated("(now() + '1 year'::interval)"))
  owner            User            @relation(fields: [ownerId], references: [id])
  ownerId          String
  active           Boolean         @default(true)
  targetFunding    Float
  currentFunding   Float           @default(0)
  postcode         Int
  shortDescription String
  aboutBusiness    String?
  aboutOwner       String?
  businessPlan     String?
  categories       String[]
  images           String[]
  attachments      String[]
  rewards          ProjectReward[]
}

model ProjectReward {
  id          String  @id @default(cuid())
  project     Project @relation(fields: [projectID], references: [id])
  projectID   String
  name        String
  description String
  cost        Float
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MessageGroup {
  id      String    @id @default(cuid())
  users   User[]
  Message Message[]
}

model Message {
  id        String       @id @default(cuid())
  group     MessageGroup @relation(fields: [groupId], references: [id])
  groupId   String
  from      User         @relation(fields: [fromId], references: [id])
  fromId    String
  body      String
  timestamp DateTime     @default(now())
}
